<div id="map" class="well" style="height: 100%"></div>

<div id="panel" class="hidden panel panel-default" style="position:absolute;left:0px;top:0px">
  <div class="panel-body">
    <form id="form" class="form-inline" method="post" data-remote="true">
      <div class="form-group">
        <input id="entry" class="form-control" name="concept[label]" placeholder="<%= t :name %>" type="text" />
        <input id="x" type="hidden" name="concept[x]"/>
        <input id="y" type="hidden" name="concept[y]"/>
        <input id="start" type="hidden" name="link[start]"/>
        <input id="end" type="hidden" name="link[end]"/>
      </div>
      <div class="form-group">
        <button class="btn btn-sm btn-success" onclick="hideForm();"><span class="glyphicon glyphicon-ok"></span></button>
        <button class="btn btn-sm btn-default"onclick="hideForm();return false;"><span class="glyphicon glyphicon-remove"></span></button>
        <button id="delete" class="btn btn-sm btn-danger" onclick="destroy();return false;"><span class="glyphicon glyphicon-trash"></span></button>
      </div>
    </form>
  </div>
</div>

<script type="text/javascript">
    const none = 0;
    const addNode = 1;
    const editNode = 2;
    const addEdge = 3;
    const editEdge = 4;
    const dragNode = 5;

    var mode = none;
    var canvasX = 0, canvasY = 0, id = 0;

    var nodes = new vis.DataSet([
        <% @concept_map.concepts.each do |c| %>
        <%= render c %>,
        <% end %>
    ]);

    var edges = new vis.DataSet([
        <% @concept_map.links.each do |l| %>
        <%= render l %>,
        <% end %>
    ]);

    var container = document.getElementById('map');

    var data = {
        nodes: nodes,
        edges: edges
    };

    var options = {
        autoResize: true,
        height: '100%',
        width: '100%',
        edges: {
            arrows : {
                to: {
                    enabled: true,
                    scaleFactor: 0.75
                },
            },
          smooth: false
        },
        physics: {
            enabled: false
        },
        interaction : {
            hover: true,
            navigationButtons: true,
            selectConnectedEdges: false,
            hoverConnectedEdges: false
        }
    };

    var network = new vis.Network(container, data, options);

    //Drag: Knoten verschieben - Anfang
    network.on("dragStart", function (params) {
      if (mode == none && params.nodes.length > 0) {
        id = params.nodes[0];
        mode = dragNode;
      }
    });

    //Drag: Knoten verschieben - Ende
    network.on("dragEnd", function (params) {
      switch (mode) {
        case dragNode:
          nodes.update({id: id, 'x': params.pointer.canvas.x, 'y': params.pointer.canvas.y});
          jQuery.ajax({
            type: "PUT",
            url: "<%= concept_map_path(@map) %>/concepts/" + id + "/",
            data: {"concept": {'label': nodes.get(id).label, 'x': params.pointer.canvas.x, 'y': params.pointer.canvas.y}}
          });
          hideForm();
      }
    });

    //Hold: Neue Kante erstellen - Anfang
    network.on("hold", function (params) {
      if (mode == none && params.nodes.length > 0) {
        id = params.nodes[0]
        mode = addEdge;
      }
    });

    //Klick: Aktuelle Aktion abbrechen oder neue Kante erstellen - Ende
    network.on("click", function (params) {
      switch (mode) {
        case editEdge:
        case editNode:
        case addNode:
          hideForm();
              break;
        case addEdge:
          if (params.nodes.length > 0) {
            $('#start').val(id);
            $('#end').val(params.nodes[0]);
            canvasX = params.pointer.canvas.x;
            canvasY = params.pointer.canvas.y;
            showForm();
          }
          else
            hideForm();
      }
    });

    //Doppelklick => Edit Node / Edit Edge / Add Node
    network.on("doubleClick", function (params) {
        if (params.nodes.length > 0) {
            id = params.nodes[0]
            canvasX = nodes.get(id).x;
            canvasY = nodes.get(id).y;
            mode = editNode;
            showForm();
        }
        else
          if (params.edges.length > 0) {
            id = params.edges[0]
            canvasX = params.pointer.canvas.x;
            canvasY = params.pointer.canvas.y;
            mode = editEdge;
            showForm();
          }
          else {
            canvasX = params.pointer.canvas.x;
            canvasY = params.pointer.canvas.y;
            mode = addNode;
            showForm();
          }
    });

    function destroy() {
      switch (mode) {
        case editNode:
          jQuery.ajax({type: "DELETE", url: "<%= concept_map_concepts_path(@map) %>/" + id });
          break;
        case editEdge:
          jQuery.ajax({type: "DELETE", url: "<%= concept_map_links_path(@map) %>/" + id });
          break;
        }
      hideForm();
    }

    function showForm() {
        switch (mode) {
            case addNode:
                $("#entry").val("");
                $("#entry").attr("name", "concept[label]");
                $("#delete").addClass("hidden");
                $("#form").attr('action', '<%= concept_map_concepts_path(@map) %>');
                $("#form").attr('method', 'post');
                $("#x").attr("value", canvasX);
                $("#y").attr("value", canvasY);
                break;
            case editNode:
                $("#entry").val(nodes.get(id).label);
                $("#entry").attr("name", "concept[label]");
                $("#delete").removeClass("hidden");
                $("#form").attr('action', '<%= concept_map_concepts_path(@map) %>/' + id);
                $("#form").attr('method', 'put');
                $("#x").attr("value", canvasX);
                $("#y").attr("value", canvasY);
                break;
            case editEdge:
                $("#entry").val(edges.get(id).label);
                $("#entry").attr("name", "link[label]");
                $("#delete").removeClass("hidden");
                $("#form").attr('action', '<%= concept_map_links_path(@map) %>/' + id);
                $("#form").attr('method', 'put');
                break;
            case addEdge:
                  $("#entry").val("");
                  $("#entry").attr("name", "link[label]");
                  $("#delete").addClass("hidden");
                  $("#form").attr('action', '<%= concept_map_links_path(@map) %>');
                  $("#form").attr('method', 'post');
        }
        $("#panel").removeClass("hidden");
        $("#panel").attr("style", "position:absolute;left:" + ($("#map").offset().left+network.canvasToDOM({x: canvasX, y: canvasY}).x-$("#form").width()/2) + "px;top:" + ($("#map").offset().top+network.canvasToDOM({x: canvasX, y: canvasY}).y-$("#form").height()/2) + "px;");
        $("#entry").focus();
    }

    //Edit/Create Aktion beenden
    function hideForm() {
        $("#panel").addClass("hidden");
        $("#panel").focusout();
        network.unselectAll();
        mode = none;
    }

    //Form bei ESC oder Enter schlie√üen
    $("#entry").on('keyup', function (e) {
      if (e.keyCode == 13 || e.keyCode == 27)
        hideForm();
    });
</script>
